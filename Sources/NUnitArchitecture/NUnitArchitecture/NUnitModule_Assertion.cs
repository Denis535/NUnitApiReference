// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

namespace NUnitArchitecture {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using ProjectArchitecture.Model;

    public class NUnitModule_Assertion : Module {

        public override string Name => "NUnit.Assertion";
        public override Namespace[] Namespaces => new INode[] {
            "NUnit.Assertions".AsNamespace(),
            "Assert".AsGroup(),
            (TypeItem) typeof( NUnit.Framework                       .Assert                                                         ),
            (TypeItem) typeof( NUnit.Framework                       .StringAssert                                                   ),
            (TypeItem) typeof( NUnit.Framework                       .CollectionAssert                                               ),
            (TypeItem) typeof( NUnit.Framework                       .DirectoryAssert                                                ),
            (TypeItem) typeof( NUnit.Framework                       .FileAssert                                                     ),
            (TypeItem) typeof( NUnit.Framework                       .Warn                                                           ),
            (TypeItem) typeof( NUnit.Framework                       .Assume                                                         ),
            "ToBe".AsGroup(),
            (TypeItem) typeof( NUnit.Framework                       .Is                                                             ),
            (TypeItem) typeof( NUnit.Framework                       .Iz                                                             ),
            (TypeItem) typeof( NUnit.Framework                       .Has                                                            ),
            (TypeItem) typeof( NUnit.Framework                       .Does                                                           ),
            (TypeItem) typeof( NUnit.Framework                       .Contains                                                       ),
            (TypeItem) typeof( NUnit.Framework                       .Throws                                                         ),
            "Delegates".AsGroup(),
            (TypeItem) typeof( NUnit.Framework                       .TestDelegate                                                   ),
            (TypeItem) typeof( NUnit.Framework                       .AsyncTestDelegate                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ActualValueDelegate<>                                          ),
            "Exceptions".AsGroup(),
            (TypeItem) typeof( NUnit.Framework                       .ResultStateException                                           ),
            (TypeItem) typeof( NUnit.Framework                       .AssertionException                                             ),
            (TypeItem) typeof( NUnit.Framework                       .MultipleAssertException                                        ),
            (TypeItem) typeof( NUnit.Framework                       .InconclusiveException                                          ),
            (TypeItem) typeof( NUnit.Framework                       .IgnoreException                                                ),
            (TypeItem) typeof( NUnit.Framework                       .SuccessException                                               ),

            "NUnit.Constraints".AsNamespace(),
            "ConstraintBuilder".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ConstraintBuilder                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ConstraintBuilder.ConstraintStack                              ),
            "ConstraintResolver".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .IResolveConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ReusableConstraint                                             ),
            "Constraint".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .IConstraint                                                    ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .Constraint                                                     ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NullConstraint                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .FalseConstraint                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .TrueConstraint                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NaNConstraint                                                  ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EqualConstraint                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SameAsConstraint                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .RangeConstraint                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AnyOfConstraint                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ExactCountConstraint                                           ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EmptyConstraint                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ContainsConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AttributeExistsConstraint                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PropertyExistsConstraint                                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .BinarySerializableConstraint                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .XmlSerializableConstraint                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EmptyDirectoryConstraint                                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .FileOrDirectoryExistsConstraint                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PredicateConstraint<>                                          ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ThrowsExceptionConstraint                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ThrowsNothingConstraint                                        ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ExceptionNotThrownConstraint                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .Tolerance                                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .Tolerance.Range                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ToleranceMode                                                  ),
            "Constraint/Prefix".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PrefixConstraint                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NotConstraint                                                  ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AttributeConstraint                                            ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PropertyConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NoItemConstraint                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SomeItemsConstraint                                            ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AllItemsConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ThrowsConstraint                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .DelayedConstraint                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .DelayedConstraint.WithRawDelayInterval                         ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .DelayedConstraint.WithDimensionedDelayInterval                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .DelayedConstraint.WithRawPollingInterval                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .Interval                                                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .Interval.IntervalUnit                                          ),
            "Constraint/Binary".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .BinaryConstraint                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AndConstraint                                                  ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .OrConstraint                                                   ),
            "Constraint/Comparison".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ComparisonConstraint                                           ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .LessThanConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .LessThanOrEqualConstraint                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .GreaterThanConstraint                                          ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .GreaterThanOrEqualConstraint                                   ),
            "Constraint/Collection".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionConstraint                                           ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EmptyCollectionConstraint                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionOrderedConstraint                                    ),
            "Constraint/Collection/Items".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionItemsEqualConstraint                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionEquivalentConstraint                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionSubsetConstraint                                     ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionSupersetConstraint                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionContainsConstraint                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .DictionaryContainsKeyConstraint                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .DictionaryContainsValueConstraint                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .UniqueItemsConstraint                                          ),
            "Constraint/String".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .StringConstraint                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EmptyStringConstraint                                          ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .StartsWithConstraint                                           ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EndsWithConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SubstringConstraint                                            ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .RegexConstraint                                                ),
            "Constraint/Path".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PathConstraint                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SamePathConstraint                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SubPathConstraint                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SamePathOrUnderConstraint                                      ),
            "Constraint/Type".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .TypeConstraint                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ExactTypeConstraint                                            ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ExceptionTypeConstraint                                        ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AssignableFromConstraint                                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AssignableToConstraint                                         ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .InstanceOfTypeConstraint                                       ),

            "ConstraintResult".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ConstraintResult                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ExactCountConstraintResult                                     ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ConstraintStatus                                               ),
            "ConstraintResult/Prefix".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PropertyConstraintResult                                       ),
            "ConstraintResult/Comparison".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EqualConstraintResult                                          ),
            "ConstraintResult/Collection".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionEquivalentConstraintResult                           ),
            "ConstraintResult/Collection/Item".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints          .EachItemConstraintResult                                        ),

            "ConstraintExpression".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ConstraintExpression                                           ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ItemsConstraintExpression                                      ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ResolvableConstraintExpression                                 ),

            "ConstraintOperator".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ConstraintOperator                                             ),
            "ConstraintOperator/Prefix".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PrefixOperator                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NotOperator                                                    ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .WithOperator                                                   ),
            "ConstraintOperator/Prefix/Collection".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .CollectionOperator                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NoneOperator                                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SomeOperator                                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AllOperator                                                    ),
            "ConstraintOperator/Binary".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .BinaryOperator                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AndOperator                                                    ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .OrOperator                                                     ),
            "ConstraintOperator/SelfResolving".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .SelfResolvingOperator                                          ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .AttributeOperator                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .PropOperator                                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ExactCountOperator                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ThrowsOperator                                                 ),

            "NUnit.Infrastructure".AsNamespace(),
            "Adapters".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .EqualityAdapter                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints          .EqualityAdapter.PredicateEqualityAdapter<,>                     ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .ComparisonAdapter                                              ),
            "Comparers".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NUnitEqualityComparer                                          ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NUnitEqualityComparer.FailurePoint                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints           .NUnitComparer                                                  ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.IChainComparer                                                  ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.NumericsComparer                                                ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.CharsComparer                                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.StringsComparer                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.TupleComparerBase                                               ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.TupleComparer                                                   ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.ValueTupleComparer                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.TimeSpanToleranceComparer                                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.DateTimeOffsetsComparer                                         ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.ArraysComparer                                                  ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.EnumerablesComparer                                             ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.DictionariesComparer                                            ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.DictionaryEntriesComparer                                       ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.KeyValuePairsComparer                                           ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.StreamsComparer                                                 ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.EquatablesComparer                                              ),
            (TypeItem) typeof( NUnit.Framework.Constraints.Comparers.DirectoriesComparer                                             ),
            "Utils".AsGroup(),
            (TypeItem) typeof( NUnit.Framework.Internal             .ConstraintUtils                                                 ),
        }.ToHierarchy();


    }
}
